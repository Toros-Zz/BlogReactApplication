{"version":3,"sources":["api/api.ts","api/posts.ts","store/actions.ts","store/selectors.ts","components/Loader/Loader.tsx","components/ModalEdit/ModalEdit.tsx","components/ModalRemove/ModalRemove.tsx","components/PostsList/PostsList.tsx","api/comments.ts","components/CommentList/CommentList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/AddPost/AddPost.tsx","App.tsx","store/index.ts","index.tsx"],"names":["BASE_URL","getData","getFrom","a","fetch","response","json","Error","removeData","removeFrom","method","addData","addTo","data","headers","body","JSON","stringify","getPosts","getSelectedPostById","postId","editPost","id","editData","SET_ALL_POSTS","SET_ACTIVE_POST_ID","SET_COMMENTS","SET_MODEL_EDIT","SET_MODEL_REMOVE","setAllPosts","payloud","type","setActivePostId","setCommentsList","setEditModel","setRemoveModal","getAllPosts","state","posts","getActivePostId","activePostId","getCommentsList","comments","hasEditModal","isEditModel","hasRemoveModal","isRemoveModel","Loader","className","ModalEdit","dispatch","useDispatch","isOpen","useSelector","useState","postTitle","setPostTitle","postBody","setPostBody","getPost","post","title","loadPosts","postsFromServer","useEffect","savePost","handlerCloseModal","handlerInput","event","currentTarget","value","name","Modal","setAppElement","onRequestClose","onSubmit","preventDefault","trim","htmlFor","required","placeholder","onChange","onClick","ModalRemove","handlerDeleteModal","PostsList","isEditModal","isRemoveModal","isLoader","setLoader","loadAllData","handlerOpenDetails","handlerEditPost","handlerRemovePost","map","classNames","getComments","CommentList","loadComments","commentsFromServer","handlerDeleteComment","comment","NewCommentForm","commentBody","setCommentBody","pushNewComment","PostDetails","isHideComment","setHideComment","setPost","loadPostDetails","postFromServer","length","isHide","AddPost","pushPost","App","to","path","element","initialState","store","createStore","action","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f599413.chunk.js","sourcesContent":["const BASE_URL = 'https://bloggy-api.herokuapp.com';\n\nexport async function getData<T>(getFrom: string): Promise<T> {\n  try {\n    const response = await fetch(`${BASE_URL}${getFrom}`);\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(`error ${error}`);\n  }\n}\n\nexport async function removeData<T>(removeFrom: string): Promise<T> {\n  try {\n    const response = await fetch(`${BASE_URL}${removeFrom}`, {\n      method: 'DELETE',\n    });\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(`error ${error}`);\n  }\n}\n\nexport async function addData<T>(addTo: string, data: T) {\n  const response = await fetch(`${BASE_URL}${addTo}`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({ ...data }),\n  });\n\n  return response.json();\n}\n\nexport async function editData<T>(addTo: string, data: T) {\n  const response = await fetch(`${BASE_URL}${addTo}`, {\n    method: 'PUT',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({ ...data }),\n  });\n\n  return response.json();\n}\n","import {\n  addData,\n  editData,\n  getData,\n  removeData,\n} from './api';\n\nexport function getPosts(): Promise<Post[]> {\n  return getData<Post[]>('/posts');\n}\n\nexport function getSelectedPostById(postId: number): Promise<Post> {\n  return getData<Post>(`/posts/${postId}`);\n}\n\nexport function addPost(data: Post): Promise<Post> {\n  return addData<Post>('/posts', data);\n}\n\nexport function editPost(data: Post, id: number): Promise<Post> {\n  return editData<Post>(`/posts/${id}`, data);\n}\n\nexport function removePost(id: number): Promise<Post> {\n  return removeData<Post>(`/posts/${id}`);\n}\n","export const SET_ALL_POSTS = 'SET_ALL_POSTS';\nexport const SET_ACTIVE_POST_ID = 'SET_ACTIVE_POST_ID';\nexport const SET_COMMENTS = 'SET_COMMENTS';\nexport const SET_MODEL_EDIT = 'SET_MODEL_EDIT';\nexport const SET_MODEL_REMOVE = 'SET_MODEL_REMOVE';\n\nexport const setAllPosts = (payloud: Post[]) => ({ type: SET_ALL_POSTS, payloud });\nexport const setActivePostId = (payloud: number) => ({ type: SET_ACTIVE_POST_ID, payloud });\nexport const setCommentsList = (payloud: CommentPost[]) => ({ type: SET_COMMENTS, payloud });\nexport const setEditModel = (payloud: boolean) => ({ type: SET_MODEL_EDIT, payloud });\nexport const setRemoveModal = (payloud: boolean) => ({ type: SET_MODEL_REMOVE, payloud });\n","import { RootState } from '.';\n\nexport const getAllPosts = (state: RootState) => state.posts;\nexport const getActivePostId = (state: RootState) => state.activePostId;\nexport const getCommentsList = (state: RootState) => state.comments;\nexport const hasEditModal = (state: RootState) => state.isEditModel;\nexport const hasRemoveModal = (state: RootState) => state.isRemoveModel;\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport './ModalEdit.scss';\nimport Modal from 'react-modal';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setActivePostId, setAllPosts, setEditModel } from '../../store/actions';\nimport { getActivePostId, hasEditModal } from '../../store/selectors';\nimport { editPost, getPosts, getSelectedPostById } from '../../api/posts';\n\nexport const ModalEdit: React.FC = () => {\n  const dispatch = useDispatch();\n  const isOpen = useSelector(hasEditModal);\n  const activePostId = useSelector(getActivePostId);\n  const [postTitle, setPostTitle] = useState('');\n  const [postBody, setPostBody] = useState('');\n\n  const getPost = async () => {\n    const post = await getSelectedPostById(activePostId);\n\n    setPostTitle(post.title);\n    setPostBody(post.body);\n  };\n\n  const loadPosts = async () => {\n    const postsFromServer = await getPosts();\n\n    dispatch(setActivePostId(0));\n    dispatch(setAllPosts(postsFromServer));\n  };\n\n  useEffect(() => {\n    getPost();\n  }, []);\n\n  const savePost = async () => {\n    const post = {\n      id: activePostId,\n      title: postTitle,\n      body: postBody,\n    };\n\n    await editPost(post, activePostId);\n    loadPosts();\n  };\n\n  const isValid = () => {\n    if (!postBody.trim()) {\n      setPostBody(postBody.trim());\n\n      return false;\n    }\n\n    if (!postTitle.trim()) {\n      setPostTitle(postTitle.trim());\n\n      return false;\n    }\n\n    return true;\n  };\n\n  const handlerCloseModal = () => {\n    dispatch(setEditModel(false));\n  };\n\n  const handlerSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (isValid()) {\n      savePost();\n      dispatch(setEditModel(false));\n    }\n  };\n\n  const handlerInput = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { value, name } = event.currentTarget;\n\n    switch (name) {\n      case 'body':\n        setPostBody(value);\n        break;\n      case 'title':\n        setPostTitle(value);\n        break;\n      default:\n    }\n  };\n\n  Modal.setAppElement('#root');\n\n  return (\n    <div>\n      <Modal\n        isOpen={isOpen}\n        onRequestClose={handlerCloseModal}\n        className=\"Modal\"\n      >\n        <h2 className=\"subtitle Modal__title\">\n          Edit product\n        </h2>\n\n        <form\n          className=\"Modal__form\"\n          onSubmit={handlerSubmit}\n        >\n          <label htmlFor=\"title\">\n            Title:\n            &nbsp;\n            <input\n              className=\"input\"\n              type=\"text\"\n              required\n              placeholder=\"Title\"\n              name=\"title\"\n              id=\"title\"\n              value={postTitle}\n              onChange={handlerInput}\n            />\n          </label>\n          <label htmlFor=\"body\">\n            Body:\n            &nbsp;\n            <textarea\n              className=\"textarea Modal__textarea\"\n              required\n              placeholder=\"Body\"\n              name=\"body\"\n              id=\"body\"\n              value={postBody}\n              onChange={handlerInput}\n            />\n          </label>\n          <section className=\"Modal__buttons\">\n            <button\n              type=\"submit\"\n              className=\"button\"\n            >\n              Save\n            </button>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={handlerCloseModal}\n            >\n              Close\n            </button>\n          </section>\n        </form>\n      </Modal>\n    </div>\n  );\n};\n","import React from 'react';\nimport './ModalRemove.scss';\nimport Modal from 'react-modal';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setActivePostId, setAllPosts, setRemoveModal } from '../../store/actions';\nimport { getActivePostId, hasRemoveModal } from '../../store/selectors';\nimport { getPosts, removePost } from '../../api/posts';\n\nexport const ModalRemove: React.FC = () => {\n  const dispatch = useDispatch();\n  const isOpen = useSelector(hasRemoveModal);\n  const activePostId = useSelector(getActivePostId);\n\n  const loadPosts = async () => {\n    const postsFromServer = await getPosts();\n\n    dispatch(setActivePostId(0));\n    dispatch(setAllPosts(postsFromServer));\n  };\n\n  const handlerCloseModal = () => {\n    dispatch(setRemoveModal(false));\n  };\n\n  const handlerDeleteModal = async () => {\n    await removePost(activePostId);\n    loadPosts();\n    dispatch(setRemoveModal(false));\n    dispatch(setActivePostId(0));\n  };\n\n  Modal.setAppElement('#root');\n\n  return (\n    <div>\n      <Modal\n        isOpen={isOpen}\n        onRequestClose={handlerCloseModal}\n        className=\"Modal\"\n      >\n        <h2 className=\"subtitle Modal__title\">\n          Are you sure?\n        </h2>\n        <section className=\"Modal__buttons\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={handlerDeleteModal}\n          >\n            Delete\n          </button>\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={handlerCloseModal}\n          >\n            Close\n          </button>\n        </section>\n      </Modal>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { getPosts } from '../../api/posts';\nimport {\n  setActivePostId,\n  setAllPosts,\n  setEditModel,\n  setRemoveModal,\n} from '../../store/actions';\nimport {\n  getActivePostId,\n  getAllPosts,\n  hasEditModal,\n  hasRemoveModal,\n} from '../../store/selectors';\nimport { Loader } from '../Loader';\nimport { ModalEdit } from '../ModalEdit';\nimport './PostsList.scss';\nimport { ModalRemove } from '../ModalRemove';\n\nexport const PostsList: React.FC = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(getAllPosts);\n  const isEditModal = useSelector(hasEditModal);\n  const isRemoveModal = useSelector(hasRemoveModal);\n  const activePostId = useSelector(getActivePostId);\n  const [isLoader, setLoader] = useState(false);\n\n  const loadPosts = async () => {\n    const postsFromServer = await getPosts();\n\n    dispatch(setAllPosts(postsFromServer));\n  };\n\n  const loadAllData = async () => {\n    setLoader(true);\n    await loadPosts();\n    setLoader(false);\n  };\n\n  useEffect(() => {\n    loadAllData();\n  }, []);\n\n  const handlerOpenDetails = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const { value } = event.currentTarget;\n\n    if (activePostId === +value) {\n      dispatch(setActivePostId(0));\n    } else {\n      dispatch(setActivePostId(+value));\n    }\n  };\n\n  const handlerEditPost = (event: React.MouseEvent<HTMLButtonElement>) => {\n    dispatch(setActivePostId(+event.currentTarget.value));\n    dispatch(setEditModel(true));\n  };\n\n  const handlerRemovePost = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    dispatch(setActivePostId(+event.currentTarget.value));\n    dispatch(setRemoveModal(true));\n  };\n\n  if (isLoader) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n    <div className=\"PostsList\">\n      <h2 className=\"subtitle PostsList__subtitle\">\n        Posts:\n      </h2>\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <section className=\"PostsList__post\">\n              <h3 className=\"subtitle\">\n                {post.title}\n              </h3>\n              <div className=\"PostsList__body\">\n                {post.body}\n              </div>\n            </section>\n            <button\n              type=\"button\"\n              className={classNames(\n                'button PostsList__button-open',\n                { 'is-active': activePostId === post.id },\n              )}\n              value={post.id}\n              onClick={handlerOpenDetails}\n            >\n              {\n                activePostId === post.id\n                  ? <>Close</>\n                  : <>Open</>\n              }\n            </button>\n            <div className=\"PostsList__buttons\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                value={post.id}\n                onClick={handlerEditPost}\n              >\n                Edit\n              </button>\n              <button\n                type=\"button\"\n                className=\"button\"\n                value={post.id}\n                onClick={handlerRemovePost}\n              >\n                Delete\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n      {\n        isEditModal && <ModalEdit />\n      }\n      {\n        isRemoveModal && <ModalRemove />\n      }\n    </div>\n  );\n};\n","import { addData, getData, removeData } from './api';\n\nexport function getComments(postId: number): Promise<CommentPost[]> {\n  return getData<CommentPost[]>(`/comments?postId=${postId}`);\n}\n\nexport function removeComment(commentId: number): Promise<CommentPost> {\n  return removeData<CommentPost>(`/comments/${commentId}`);\n}\n\nexport function addComment(data: CommentPost): Promise<CommentPost> {\n  return addData<CommentPost>('/comments', data);\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getComments, removeComment } from '../../api/comments';\nimport { setCommentsList } from '../../store/actions';\nimport { getActivePostId, getCommentsList } from '../../store/selectors';\nimport './CommentList.scss';\n\nexport const CommentList: React.FC = () => {\n  const dispatch = useDispatch();\n  const activePostId = useSelector(getActivePostId);\n  const comments = useSelector(getCommentsList);\n\n  const loadComments = async (id: number) => {\n    const commentsFromServer = await getComments(id);\n\n    dispatch(setCommentsList(commentsFromServer));\n  };\n\n  const handlerDeleteComment = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    const { value } = event.currentTarget;\n\n    await removeComment(+value);\n    loadComments(activePostId);\n  };\n\n  return (\n    <ul className=\"CommentList\">\n      {\n        comments.map(comment => (\n          <li\n            className=\"CommentList__item\"\n            key={comment.id}\n          >\n            <button\n              type=\"button\"\n              className=\"CommentList__button button\"\n              value={comment.id}\n              onClick={handlerDeleteComment}\n            >\n              X\n            </button>\n            <p>\n              {comment.body}\n            </p>\n          </li>\n        ))\n      }\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addComment, getComments } from '../../api/comments';\nimport { setCommentsList } from '../../store/actions';\nimport { getActivePostId } from '../../store/selectors';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const activePostId = useSelector(getActivePostId);\n\n  const [commentBody, setCommentBody] = useState('');\n\n  const loadComments = async (id: number) => {\n    const commentsFromServer = await getComments(id);\n\n    dispatch(setCommentsList(commentsFromServer));\n  };\n\n  const hendlerInputs = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setCommentBody(event.currentTarget.value);\n  };\n\n  const resetFields = () => {\n    setCommentBody('');\n  };\n\n  const isValid = () => {\n    if (!commentBody.trim()) {\n      setCommentBody(commentBody.trim());\n\n      return false;\n    }\n\n    return true;\n  };\n\n  const pushNewComment = async () => {\n    await addComment({\n      postId: activePostId,\n      body: commentBody,\n    });\n\n    if (isValid()) {\n      resetFields();\n      loadComments(activePostId);\n    }\n  };\n\n  const handlerSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    pushNewComment();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handlerSubmit}\n    >\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"textarea\"\n          value={commentBody}\n          onChange={hendlerInputs}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getComments } from '../../api/comments';\nimport { getSelectedPostById } from '../../api/posts';\nimport { setCommentsList } from '../../store/actions';\nimport { getActivePostId, getCommentsList } from '../../store/selectors';\nimport { CommentList } from '../CommentList';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails: React.FC = () => {\n  const dispatch = useDispatch();\n  const activePostId = useSelector(getActivePostId);\n  const comments = useSelector(getCommentsList);\n\n  const [isHideComment, setHideComment] = useState(true);\n  const [post, setPost] = useState<Post | null>(null);\n  const [isLoader, setLoader] = useState(false);\n\n  const loadComments = async (id: number) => {\n    const commentsFromServer = await getComments(id);\n\n    dispatch(setCommentsList(commentsFromServer));\n  };\n\n  const loadPostDetails = async (id: number) => {\n    setLoader(true);\n    const postFromServer = await getSelectedPostById(id);\n\n    loadComments(activePostId);\n    setPost(postFromServer);\n    setLoader(false);\n  };\n\n  useEffect(() => {\n    if (activePostId) {\n      loadPostDetails(activePostId);\n    }\n  },\n  [activePostId]);\n\n  const handlerHideComment = () => {\n    setHideComment((isHide) => (!isHide));\n  };\n\n  if (isLoader) {\n    return (\n      <Loader />\n    );\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2 className=\"subtitle PostDetails__subtitle\">\n        Post details:\n      </h2>\n      {\n        post\n          ? (\n            <>\n              <section className=\"PostDetails__post\">\n                <h3 className=\"subtitle PostDetails__post-title\">\n                  {post.title}\n                </h3>\n                <div className=\"PostDetails__post-body\">\n                  {post.body}\n                </div>\n              </section>\n\n              {\n                !!comments.length\n                && (\n                  <section className=\"PostDetails__comments\">\n                    <button\n                      type=\"button\"\n                      className=\"button PostDetails__hide\"\n                      onClick={handlerHideComment}\n                    >\n                      {\n                        isHideComment\n                          ? (<>Hide </>)\n                          : (<>Show </>)\n                      }\n                      {comments.length}\n                      <> comments</>\n                    </button>\n                    {\n                      isHideComment\n                      && <CommentList />\n                    }\n                  </section>\n                )\n              }\n\n              <section>\n                <div className=\"PostDetails__form\">\n                  <NewCommentForm />\n                </div>\n              </section>\n            </>\n          )\n          : (\n            <span>\n              Can not find post details\n            </span>\n          )\n      }\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { addPost } from '../../api/posts';\nimport './AddPost.scss';\n\nexport const AddPost: React.FC = () => {\n  const [postTitle, setPostTitle] = useState('');\n  const [postBody, setPostBody] = useState('');\n\n  const resetFields = () => {\n    setPostTitle('');\n    setPostBody('');\n  };\n\n  const isValid = () => {\n    if (!postBody.trim()) {\n      setPostBody(postBody.trim());\n\n      return false;\n    }\n\n    if (!postTitle.trim()) {\n      setPostTitle(postTitle.trim());\n\n      return false;\n    }\n\n    return true;\n  };\n\n  const pushPost = async () => {\n    const post = {\n      title: postTitle,\n      body: postBody,\n    };\n\n    if (isValid()) {\n      await addPost(post);\n      resetFields();\n    }\n  };\n\n  const handlerSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    pushPost();\n  };\n\n  const handlerInput = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { value, name } = event.currentTarget;\n\n    switch (name) {\n      case 'body':\n        setPostBody(value);\n        break;\n      case 'title':\n        setPostTitle(value);\n        break;\n      default:\n    }\n  };\n\n  return (\n    <form\n      className=\"AddPost__form\"\n      onSubmit={handlerSubmit}\n    >\n      <label htmlFor=\"title\">\n        Title:\n        &nbsp;\n        <input\n          className=\"input AddPost__input\"\n          type=\"text\"\n          id=\"title\"\n          name=\"title\"\n          required\n          value={postTitle}\n          placeholder=\"Type title here\"\n          onChange={handlerInput}\n        />\n      </label>\n      <label htmlFor=\"body\">\n        Body:\n        &nbsp;\n        <textarea\n          className=\"textarea AddPost__textarea\"\n          required\n          id=\"body\"\n          name=\"body\"\n          value={postBody}\n          placeholder=\"Type body here\"\n          onChange={handlerInput}\n        />\n      </label>\n      <button\n        type=\"submit\"\n        className=\"button AddPost__button\"\n      >\n        Add post\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { NavLink, Route, Routes } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { AddPost } from './components/AddPost';\nimport { getActivePostId } from './store/selectors';\n\nexport const App: React.FC = () => {\n  const activePostId = useSelector(getActivePostId);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <h1 className=\"title App__title\">\n          React/Redux Blog\n        </h1>\n        <NavLink\n          to=\"/\"\n          className=\"button App__button\"\n        >\n          Posts\n        </NavLink>\n        <NavLink\n          to=\"/addpost\"\n          className=\"button App__button\"\n        >\n          Add post\n        </NavLink>\n      </header>\n      <main className=\"App__main\">\n        <Routes>\n          <Route\n            path=\"/addpost\"\n            element={(\n              <>\n                <div className=\"App__content\">\n                  <AddPost />\n                </div>\n              </>\n            )}\n          />\n          <Route\n            path=\"/\"\n            element={(\n              <>\n                <div className=\"App__sidebar\">\n                  <PostsList />\n                </div>\n\n                <div className=\"App__content\">\n                  {\n                    activePostId\n                      ? <PostDetails />\n                      : (\n                        <h3 className=\"subtitle\">\n                          Select post\n                        </h3>\n                      )\n                  }\n                </div>\n              </>\n            )}\n          />\n        </Routes>\n      </main>\n    </div>\n  );\n};\n","import { createStore, AnyAction } from 'redux';\nimport {\n  SET_ACTIVE_POST_ID,\n  SET_ALL_POSTS,\n  SET_COMMENTS,\n  SET_MODEL_EDIT,\n  SET_MODEL_REMOVE,\n} from './actions';\n\nexport type RootState = {\n  posts: Post[];\n  activePostId: number,\n  comments: CommentPost[];\n  isEditModel: boolean;\n  isRemoveModel: boolean;\n};\n\nexport const initialState: RootState = {\n  posts: [],\n  activePostId: 0,\n  comments: [],\n  isEditModel: false,\n  isRemoveModel: false,\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_MODEL_EDIT:\n      return { ...state, isEditModel: action.payloud };\n\n    case SET_MODEL_REMOVE:\n      return { ...state, isRemoveModel: action.payloud };\n\n    case SET_COMMENTS:\n      return { ...state, comments: action.payloud };\n\n    case SET_ALL_POSTS:\n      return { ...state, posts: action.payloud };\n\n    case SET_ACTIVE_POST_ID:\n      return { ...state, activePostId: action.payloud };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(\n  rootReducer,\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport { App } from './App';\nimport './index.scss';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}